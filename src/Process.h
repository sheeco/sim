/***********************************************************************************************************************************

顶级类 CProcess ： 所有非实体类（过程、算法、协议、接口等），应该最终继承自这个类

***********************************************************************************************************************************/

#pragma once

#ifndef __PROCESS_H__
#define __PROCESS_H__


class CProcess
{
public:

	CProcess(){};
	virtual ~CProcess() = 0
	{};

};

/***********************************************************************************************************************************

次级类 CHelper ： 所有由一些零散的辅助函数包装成的接口类，应该继承自这个类

***********************************************************************************************************************************/

class CHelper :
	virtual public CProcess
{
public:

	CHelper()
	{
	};
	virtual ~CHelper() = 0
	{
	};

};

/***********************************************************************************************************************************

次级类 CAlgorithm ： 所有具体算法实现的单独成类，应该继承自这个类；
除非属于路由或MAC层协议，则应该继承自CRoutingProtocol或CMacProtocol类

***********************************************************************************************************************************/

class CAlgorithm :
	virtual public CProcess
{
public:

	CAlgorithm()
	{
	};
	virtual ~CAlgorithm() = 0
	{
	};

};

/***********************************************************************************************************************************

抽象类 CProtocol ： 与CAlgorithm类似，但专用于网络协议算法，所有协议算法的实现类，都应该继承自这个类

***********************************************************************************************************************************/

class CProtocol :
	virtual public CAlgorithm
{
public:

	CProtocol()
	{
	};
	virtual ~CProtocol() = 0
	{
	};

};


#endif // __PROCESS_H__
